# Task 41 - Gitlab CI Environments

# 1. Create a new job CI_Deploy_Testing, and copy the job from the attachment to update your .gitlab-ci.yml file.
# 2. Once your pipeline got completed successfully, 
# Go to Deployments -> Environment -> Testing -> View Deployment to view your website.

# 80 포트 충돌 발생하면, EC2 웹 서버 리부팅 (port is already allocated.)

include:
  - local: 'child-pipeline.yml' 

default: 
  timeout: 1 hour

stages:
    - pre-check
    - build
    - test
    - deploy #1

image: docker:latest

CI_Pre_Check:
    stage: pre-check
    only: 
      - main
    allow_failure: true 
    script:
      - docker version 
      - docker ps 
      - docker images ls 
      - sleep 20  
     
CI_Build:
    stage: build
    needs: [] 
    retry: 2
    inherit:
      default: false 
    only: 
      - main
    before_script:
      - echo "Build CI_Build Started"
      - sleep 10
    script:
      - docker build -t $Image_Name:$CI_PIPELINE_IID . 
      - docker save $Image_Name:$CI_PIPELINE_IID > $CI_PIPELINE_IID.tar 
    after_script:
      - docker images
    cache: 
      key: "mycache"
      paths:
        - ./ 
    artifacts: 
      name: "Devops"
      paths:
        - ./ 
      when: on_failure  
      expire_in: 1 week 
      exclude:
        - .gitlab-ci.yml 

CI_Build_V2:
    stage: build
    only:
      - main
    needs: [CI_Pre_Check] 
    before_script:
      - echo "Build CI_Build_V2 Started"
      - sleep 10
    script:
      - docker build -t $Image_Name_V2:$CI_PIPELINE_IID . 
    after_script:
      - docker images

CI_Test:
    stage: test
    only:
      - main
    when: manual 
    script:
      - docker ps
      - docker images
    
.pages: 
  stage: deploy
  script:
    - mkdir .public
    - cp -r * .public
    - mv .public public
  artifacts:
    paths:
      - public

CI_Deploy_Testing: # 2
  stage: deploy
  only:
    - main
  script:
    - docker run -itd -p 80:80 httpd
  environment:
    name: Testing
